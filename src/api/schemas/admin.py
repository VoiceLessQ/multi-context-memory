"""
Pydantic schemas for admin operations in the enhanced MCP Multi-Context Memory System.
"""
from typing import Optional, Dict, Any, List
from datetime import datetime
from pydantic import BaseModel, Field, EmailStr, validator

class AdminUserBase(BaseModel):
    """Base schema for admin user operations."""
    username: str = Field(..., min_length=3, max_length=50)
    email: EmailStr
    full_name: Optional[str] = Field(None, max_length=100)
    role: str = Field("user", regex="^(user|privileged|admin)$")
    is_active: bool = True

    @validator('username')
    def validate_username(cls, v):
        """Validate username."""
        if not v or not isinstance(v, str):
            raise ValueError("Username must be a non-empty string")
        v = v.strip()
        if not v:
            raise ValueError("Username cannot be empty")
        return v

class AdminUserCreate(AdminUserBase):
    """Schema for creating a new user by admin."""
    password: str = Field(..., min_length=8, max_length=100)

    @validator('password')
    def validate_password(cls, v):
        """Validate password."""
        if not v or not isinstance(v, str):
            raise ValueError("Password must be a non-empty string")
        v = v.strip()
        if not v:
            raise ValueError("Password cannot be empty")
        if len(v) < 8:
            raise ValueError("Password must be at least 8 characters long")
        return v

class AdminUserUpdate(BaseModel):
    """Schema for updating a user by admin."""
    username: Optional[str] = Field(None, min_length=3, max_length=50)
    email: Optional[EmailStr] = Field(None)
    full_name: Optional[str] = Field(None, max_length=100)
    role: Optional[str] = Field(None, regex="^(user|privileged|admin)$")
    is_active: Optional[bool] = Field(None)

    @validator('username')
    def validate_username(cls, v):
        """Validate username."""
        if v is not None:
            if not isinstance(v, str):
                raise ValueError("Username must be a string")
            v = v.strip()
            if not v:
                raise ValueError("Username cannot be empty")
        return v

class AdminUserResponse(AdminUserBase):
    """Schema for user response to admin."""
    id: int
    created_at: datetime
    updated_at: datetime
    last_login: Optional[datetime] = None

    class Config:
        from_attributes = True

class SystemStats(BaseModel):
    """Schema for system statistics."""
    total_users: int
    total_memories: int
    total_contexts: int
    total_relations: int
    active_users_last_7_days: int
    active_users_last_30_days: int
    system_uptime_days: float
    database_size_mb: float
    last_backup: Optional[datetime]
    next_backup: Optional[datetime]
    version: str
    environment: str

class SystemLog(BaseModel):
    """Schema for system log."""
    id: int
    level: str = Field(..., regex="^(DEBUG|INFO|WARNING|ERROR|CRITICAL)$")
    message: str = Field(..., min_length=1)
    user_id: Optional[int] = Field(None)
    action: Optional[str] = Field(None)
    resource_type: Optional[str] = Field(None)
    resource_id: Optional[int] = Field(None)
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)
    created_at: datetime

    class Config:
        from_attributes = True

class SystemLogResponse(SystemLog):
    """Schema for system log response."""
    username: Optional[str] = None
    full_name: Optional[str] = None

class SystemLogFilter(BaseModel):
    """Schema for system log filtering."""
    level: Optional[str] = Field(None, regex="^(DEBUG|INFO|WARNING|ERROR|CRITICAL)$")
    user_id: Optional[int] = Field(None)
    action: Optional[str] = Field(None)
    resource_type: Optional[str] = Field(None)
    start_date: Optional[datetime] = Field(None)
    end_date: Optional[datetime] = Field(None)
    limit: int = Field(100, ge=1, le=1000)
    offset: int = Field(0, ge=0)

class BackupRequest(BaseModel):
    """Schema for backup request."""
    include_media: bool = Field(True)
    include_metadata: bool = Field(True)
    compression: bool = Field(True)
    backup_type: str = Field("full", regex="^(full|incremental)$")

class BackupResponse(BaseModel):
    """Schema for backup response."""
    backup_id: str
    backup_path: str
    backup_size_mb: float
    backup_type: str
    created_at: datetime
    includes_media: bool
    includes_metadata: bool
    compressed: bool
    expires_at: datetime

class RestoreRequest(BaseModel):
    """Schema for restore request."""
    backup_path: str = Field(..., min_length=1)
    overwrite: bool = Field(False)
    validate_only: bool = Field(False)
    restore_metadata: bool = Field(True)
    restore_media: bool = Field(True)

class RestoreResponse(BaseModel):
    """Schema for restore response."""
    restore_id: str
    backup_path: str
    status: str = Field(..., regex="^(pending|in_progress|completed|failed)$")
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    restored_items: Optional[Dict[str, int]] = None
    errors: Optional[List[str]] = None

class SystemHealth(BaseModel):
    """Schema for system health check."""
    status: str = Field(..., regex="^(healthy|degraded|unhealthy)$")
    database_status: str = Field(..., regex="^(healthy|degraded|unhealthy)$")
    memory_usage_percent: float = Field(..., ge=0.0, le=100.0)
    cpu_usage_percent: float = Field(..., ge=0.0, le=100.0)
    disk_usage_percent: float = Field(..., ge=0.0, le=100.0)
    active_connections: int
    uptime_seconds: int
    last_check: datetime

class SystemConfig(BaseModel):
    """Schema for system configuration."""
    max_file_size_mb: int = Field(10, ge=1, le=100)
    max_memories_per_user: int = Field(10000, ge=1)
    max_contexts_per_user: int = Field(1000, ge=1)
    max_relations_per_memory: int = Field(100, ge=1)
    password_min_length: int = Field(8, ge=6)
    session_timeout_minutes: int = Field(30, ge=5)
    backup_retention_days: int = Field(30, ge=1)
    log_retention_days: int = Field(90, ge=1)
    enable_anonymous_access: bool = Field(False)
    enable_registration: bool = Field(True)
    enable_guest_access: bool = Field(False)
    default_access_level: str = Field("user", regex="^(public|user|privileged|admin)$")
    max_search_results: int = Field(100, ge=1, le=1000)
    similarity_threshold: float = Field(0.5, ge=0.0, le=1.0)
    auto_discover_relations: bool = Field(True)
    relation_discovery_interval_hours: int = Field(24, ge=1)
    enable_ai_summarization: bool = Field(True)
    ai_summarization_model: str = Field("distilbert-base-nli-mean-tokens")
    enable_encryption: bool = Field(True)
    encryption_algorithm: str = Field("AES-256")
    compression_algorithm: str = Field("gzip")
    cache_size_mb: int = Field(100, ge=1)
    worker_count: int = Field(4, ge=1)
    enable_webhooks: bool = Field(False)
    webhook_url: Optional[str] = Field(None)
    webhook_secret: Optional[str] = Field(None)
    enable_metrics: bool = Field(True)
    metrics_interval_seconds: int = Field(60, ge=10)
    enable_profiling: bool = Field(False)
    profiling_sample_rate: float = Field(0.1, ge=0.0, le=1.0)
    enable_debug_mode: bool = Field(False)
    log_level: str = Field("INFO", regex="^(DEBUG|INFO|WARNING|ERROR|CRITICAL)$")
    log_file_path: Optional[str] = Field(None)
    log_rotation_size_mb: int = Field(100, ge=1)
    log_retention_count: int = Field(10, ge=1)
    enable_audit_log: bool = Field(True)
    audit_log_retention_days: int = Field(365, ge=1)
    enable_rate_limiting: bool = Field(True)
    rate_limit_requests_per_minute: int = Field(100, ge=1)
    enable_cors: bool = Field(True)
    cors_origins: List[str] = Field(default_factory=lambda: ["*"])
    enable_hsts: bool = Field(True)
    hsts_max_age: int = Field(31536000, ge=0)
    enable_xss_protection: bool = Field(True)
    enable_clickjacking_protection: bool = Field(True)
    enable_content_security_policy: bool = Field(True)
    csp_policy: Optional[str] = Field(None)
    enable_sqlite_wal: bool = Field(True)
    sqlite_journal_mode: str = Field("WAL")
    sqlite_synchronous: str = Field("NORMAL")
    sqlite_temp_store: str = Field("DEFAULT")
    sqlite_mmap_size: int = Field(268435456, ge=0)
    sqlite_cache_size: int = Field(-2000, ge=-1)
    sqlite_busy_timeout: int = Field(30000, ge=0)
    enable_redis: bool = Field(False)
    redis_host: Optional[str] = Field(None)
    redis_port: Optional[int] = Field(None)
    redis_password: Optional[str] = Field(None)
    redis_db: Optional[int] = Field(None)
    enable_elasticsearch: bool = Field(False)
    elasticsearch_hosts: List[str] = Field(default_factory=list)
    elasticsearch_username: Optional[str] = Field(None)
    elasticsearch_password: Optional[str] = Field(None)
    elasticsearch_index_prefix: str = Field("mcp_memory")
    enable_sentry: bool = Field(False)
    sentry_dsn: Optional[str] = Field(None)
    sentry_environment: Optional[str] = Field(None)
    sentry_release: Optional[str] = Field(None)
    enable_new_relic: bool = Field(False)
    new_relic_license_key: Optional[str] = Field(None)
    new_relic_app_name: Optional[str] = Field(None)
    enable_datadog: bool = Field(False)
    datadog_api_key: Optional[str] = Field(None)
    datadog_app_key: Optional[str] = Field(None)
    datadog_env: Optional[str] = Field(None)
    enable_prometheus: bool = Field(False)
    prometheus_port: int = Field(8000, ge=1, le=65535)
    prometheus_path: str = Field("/metrics")
    enable_grafana: bool = Field(False)
    grafana_url: Optional[str] = Field(None)
    grafana_api_key: Optional[str] = Field(None)
    enable_jaeger: bool = Field(False)
    jaeger_agent_host: Optional[str] = Field(None)
    jaeger_agent_port: Optional[int] = Field(None)
    jaeger_service_name: str = Field("mcp-memory")
    enable_zipkin: bool = Field(False)
    zipkin_url: Optional[str] = Field(None)
    enable_opentelemetry: bool = Field(False)
    opentelemetry_exporter: str = Field("jaeger")
    opentelemetry_service_name: str = Field("mcp-memory")
    opentelemetry_resource_attributes: Dict[str, str] = Field(default_factory=dict)
    enable_kafka: bool = Field(False)
    kafka_bootstrap_servers: List[str] = Field(default_factory=list)
    kafka_topic: str = Field("mcp_memory_events")
    kafka_consumer_group: str = Field("mcp_memory_api")
    kafka_username: Optional[str] = Field(None)
    kafka_password: Optional[str] = Field(None)
    enable_rabbitmq: bool = Field(False)
    rabbitmq_host: Optional[str] = Field(None)
    rabbitmq_port: Optional[int] = Field(None)
    rabbitmq_username: Optional[str] = Field(None)
    rabbitmq_password: Optional[str] = Field(None)
    rabbitmq_queue: str = Field("mcp_memory_events")
    rabbitmq_exchange: str = Field("mcp_memory_exchange")
    enable_sqs: bool = Field(False)
    aws_region: Optional[str] = Field(None)
    aws_access_key_id: Optional[str] = Field(None)
    aws_secret_access_key: Optional[str] = Field(None)
    sqs_queue_url: Optional[str] = Field(None)
    enable_sns: bool = Field(False)
    sns_topic_arn: Optional[str] = Field(None)
    enable_azure_service_bus: bool = Field(False)
    azure_sb_connection_string: Optional[str] = Field(None)
    azure_sb_queue_name: str = Field("mcp_memory_events")
    enable_google_pubsub: bool = Field(False)
    google_pubsub_project_id: Optional[str] = Field(None)
    google_pubsub_topic: str = Field("mcp_memory_events")
    enable_apache_kafka: bool = Field(False)
    apache_kafka_bootstrap_servers: List[str] = Field(default_factory=list)
    apache_kafka_topic: str = Field("mcp_memory_events")
    apache_kafka_consumer_group: str = Field("mcp_memory_api")
    apache_kafka_username: Optional[str] = Field(None)
    apache_kafka_password: Optional[str] = Field(None)
    enable_confluent_cloud: bool = Field(False)
    confluent_cloud_bootstrap_servers: Optional[str] = Field(None)
    confluent_cloud_sasl_username: Optional[str] = Field(None)
    confluent_cloud_sasl_password: Optional[str] = Field(None)
    confluent_cloud_security_protocol: str = Field("SASL_SSL")
    confluent_cloud_sasl_mechanism: str = Field("PLAIN")
    confluent_cloud_topic: str = Field("mcp_memory_events")
    confluent_cloud_consumer_group: str = Field("mcp_memory_api")
    enable_aws_kinesis: bool = Field(False)
    aws_kinesis_stream_name: str = Field("mcp_memory_events")
    aws_kinesis_region: Optional[str] = Field(None)
    aws_kinesis_access_key_id: Optional[str] = Field(None)
    aws_kinesis_secret_access_key: Optional[str] = Field(None)
    enable_aws_dynamodb: bool = Field(False)
    aws_dynamodb_table_name: str = Field("mcp_memory")
    aws_dynamodb_region: Optional[str] = Field(None)
    aws_dynamodb_access_key_id: Optional[str] = Field(None)
    aws_dynamodb_secret_access_key: Optional[str] = Field(None)
    enable_mongodb: bool = Field(False)
    mongodb_uri: Optional[str] = Field(None)
    mongodb_database: str = Field("mcp_memory")
    enable_cassandra: bool = Field(False)
    cassandra_contact_points: List[str] = Field(default_factory=list)
    cassandra_keyspace: str = Field("mcp_memory")
    cassandra_username: Optional[str] = Field(None)
    cassandra_password: Optional[str] = Field(None)
    enable_postgresql: bool = Field(False)
    postgresql_host: Optional[str] = Field(None)
    postgresql_port: Optional[int] = Field(None)
    postgresql_username: Optional[str] = Field(None)
    postgresql_password: Optional[str] = Field(None)
    postgresql_database: str = Field("mcp_memory")
    enable_mysql: bool = Field(False)
    mysql_host: Optional[str] = Field(None)
    mysql_port: Optional[int] = Field(None)
    mysql_username: Optional[str] = Field(None)
    mysql_password: Optional[str] = Field(None)
    mysql_database: str = Field("mcp_memory")
    enable_oracle: bool = Field(False)
    oracle_host: Optional[str] = Field(None)
    oracle_port: Optional[int] = Field(None)
    oracle_username: Optional[str] = Field(None)
    oracle_password: Optional[str] = Field(None)
    oracle_service_name: str = Field("mcp_memory")
    enable_mssql: bool = Field(False)
    mssql_host: Optional[str] = Field(None)
    mssql_port: Optional[int] = Field(None)
    mssql_username: Optional[str] = Field(None)
    mssql_password: Optional[str] = Field(None)
    mssql_database: str = Field("mcp_memory")
    enable_sqlite: bool = Field(True)
    sqlite_database_path: str = Field("./data/sqlite/memory.db")
    enable_influxdb: bool = Field(False)
    influxdb_url: Optional[str] = Field(None)
    influxdb_token: Optional[str] = Field(None)
    influxdb_org: Optional[str] = Field(None)
    influxdb_bucket: str = Field("mcp_memory")
    enable_timescale: bool = Field(False)
    timescale_host: Optional[str] = Field(None)
    timescale_port: Optional[int] = Field(None)
    timescale_username: Optional[str] = Field(None)
    timescale_password: Optional[str] = Field(None)
    timescale_database: str = Field("mcp_memory")
    enable_cockroachdb: bool = Field(False)
    cockroachdb_host: Optional[str] = Field(None)
    cockroachdb_port: Optional[int] = Field(None)
    cockroachdb_username: Optional[str] = Field(None)
    cockroachdb_password: Optional[str] = Field(None)
    cockroachdb_database: str = Field("mcp_memory")
    enable_yugabyte: bool = Field(False)
    yugabyte_host: Optional[str] = Field(None)
    yugabyte_port: Optional[int] = Field(None)
    yugabyte_username: Optional[str] = Field(None)
    yugabyte_password: Optional[str] = Field(None)
    yugabyte_database: str = Field("mcp_memory")
    enable_cassandra: bool = Field(False)
    cassandra_contact_points: List[str] = Field(default_factory=list)
    cassandra_keyspace: str = Field("mcp_memory")
    cassandra_username: Optional[str] = Field(None)
    cassandra_password: Optional[str] = Field(None)
    enable_scylladb: bool = Field(False)
    scylladb_contact_points: List[str] = Field(default_factory=list)
    scylladb_keyspace: str = Field("mcp_memory")
    scylladb_username: Optional[str] = Field(None)
    scylladb_password: Optional[str] = Field(None)
    enable_riak: bool = Field(False)
    riak_host: Optional[str] = Field(None)
    riak_port: Optional[int] = Field(None)
    riak_username: Optional[str] = Field(None)
    riak_password: Optional[str] = Field(None)
    riak_bucket: str = Field("mcp_memory")
    enable_arangodb: bool = Field(False)
    arangodb_host: Optional[str] = Field(None)
    arangodb_port: Optional[int] = Field(None)
    arangodb_username: Optional[str] = Field(None)
    arangodb_password: Optional[str] = Field(None)
    arangodb_database: str = Field("mcp_memory")
    enable_neo4j: bool = Field(False)
    neo4j_uri: Optional[str] = Field(None)
    neo4j_username: Optional[str] = Field(None)
    neo4j_password: Optional[str] = Field(None)
    enable_orientdb: bool = Field(False)
    orientdb_host: Optional[str] = Field(None)
    orientdb_port: Optional[int] = Field(None)
    orientdb_username: Optional[str] = Field(None)
    orientdb_password: Optional[str] = Field(None)
    orientdb_database: str = Field("mcp_memory")
    enable_db2: bool = Field(False)
    db2_host: Optional[str] = Field(None)
    db2_port: Optional[int] = Field(None)
    db2_username: Optional[str] = Field(None)
    db2_password: Optional[str] = Field(None)
    db2_database: str = Field("mcp_memory")
    enable_snowflake: bool = Field(False)
    snowflake_account: Optional[str] = Field(None)
    snowflake_username: Optional[str] = Field(None)
    snowflake_password: Optional[str] = Field(None)
    snowflake_database: str = Field("mCP_MEMORY")
    snowflake_schema: str = Field("PUBLIC")
    enable_redshift: bool = Field(False)
    redshift_host: Optional[str] = Field(None)
    redshift_port: Optional[int] = Field(None)
    redshift_username: Optional[str] = Field(None)
    redshift_password: Optional[str] = Field(None)
    redshift_database: str = Field("mcp_memory")
    enable_bigquery: bool = Field(False)
    bigquery_project_id: Optional[str] = Field(None)
    bigquery_dataset_id: str = Field("mcp_memory")
    enable_databricks: bool = Field(False)
    databricks_host: Optional[str] = Field(None)
    databricks_token: Optional[str] = Field(None)
    databricks_path: str = Field("/sql/1.0/warehouses")
    enable_synapse: bool = Field(False)
    synapse_server: Optional[str] = Field(None)
    synapse_database: str = Field("mcp_memory")
    synapse_username: Optional[str] = Field(None)
    synapse_password: Optional[str] = Field(None)
    enable_athena: bool = Field(False)
    athena_output_location: Optional[str] = Field(None)
    athena_database: str = Field("mcp_memory")
    enable_glue: bool = Field(False)
    glue_database: str = Field("mcp_memory")
    glue_table: str = Field("memories")
    enable_emr: bool = Field(False)
    emr_cluster_id: Optional[str] = Field(None)
    emr_log_uri: Optional[str] = Field(None)
    enable_dataproc: bool = Field(False)
    dataproc_cluster_name: Optional[str] = Field(None)
    dataproc_region: Optional[str] = Field(None)
    enable_datalake: bool = Field(False)
    datalake_storage_account: Optional[str] = Field(None)
    datalake_container: str = Field("mcp-memory")
    enable_datawarehouse: bool = Field(False)
    datawarehouse_type: str = Field("snowflake")
    datawarehouse_connection_string: Optional[str] = Field(None)
    enable_datahub: bool = Field(False)
    datahub_host: Optional[str] = Field(None)
    datahub_port: Optional[int] = Field(None)
    datahub_username: Optional[str] = Field(None)
    datahub_password: Optional[str] = Field(None)
    enable_datacatalog: bool = Field(False)
    datacatalog_project_id: Optional[str] = Field(None)
    datacatalog_location_id: Optional[str] = Field(None)
    datacatalog_dataset_id: str = Field("mcp_memory")
    enable_dataplex: bool = Field(False)
    dataplex_project_id: Optional[str] = Field(None)
    dataplex_location_id: Optional[str] = Field(None)
    dataplex_lake_id: Optional[str] = Field(None)
    dataplex_zone_id: Optional[str] = Field(None)
    dataplex_asset_id: Optional[str] = Field(None)
    enable_bigtable: bool = Field(False)
    bigtable_instance_id: str = Field("mcp-memory")
    bigtable_table_id: str = Field("memories")
    enable_spanner: bool = Field(False)
    spanner_instance_id: str = Field("mcp-memory")
    spanner_database_id: str = Field("memories")
    enable_firestore: bool = Field(False)
    firestore_project_id: Optional[str] = Field(None)
    firestore_collection: str = Field("memories")
    enable_realtime_db: bool = Field(False)
    realtime_db_url: Optional[str] = Field(None)
    enable_cloud_sql: bool = Field(False)
    cloud_sql_instance: Optional[str] = Field(None)
    cloud_sql_database: str = Field("mcp_memory")
    cloud_sql_user: Optional[str] = Field(None)
    cloud_sql_password: Optional[str] = Field(None)
    enable_cloud_storage: bool = Field(False)
    cloud_storage_bucket: str = Field("mcp-memory")
    enable_cloud_functions: bool = Field(False)
    cloud_functions_region: Optional[str] = Field(None)
    cloud_functions_name: str = Field("mcp_memory_processor")
    enable_cloud_run: bool = Field(False)
    cloud_run_service_name: str = Field("mcp-memory-api")
    cloud_run_region: Optional[str] = Field(None)
    enable_kubernetes: bool = Field(False)
    kubernetes_namespace: str = Field("default")
    kubernetes_deployment_name: str = Field("mcp-memory-api")
    kubernetes_service_name: str = Field("mcp-memory-api")
    enable_helm: bool = Field(False)
    helm_release_name: str = Field("mcp-memory")
    helm_chart_name: str = Field("mcp-memory")
    helm_chart_version: str = Field("latest")
    helm_repo_url: Optional[str] = Field(None)
    enable_tiller: bool = Field(False)
    tiller_namespace: str = Field("kube-system")
    enable_argo: bool = Field(False)
    argo_namespace: str = Field("argo")
    argo_workflow_name: str = Field("mcp-memory-processing")
    enable_argo_cd: bool = Field(False)
    argo_cd_namespace: str = Field("argocd")
    argo_cd_application_name: str = Field("mcp-memory")
    enable_flux: bool = Field(False)
    flux_namespace: str = Field("flux-system")
    flux_git_repository: str = Field("https://github.com/example/mcp-memory")
    flux_git_branch: str = Field("main")
    flux_git_path: str = Field("deployments/overlays/production")
    enable_jenkins: bool = Field(False)
    jenkins_url: Optional[str] = Field(None)
    jenkins_username: Optional[str] = Field(None)
    jenkins_password: Optional[str] = Field(None)
    jenkins_job_name: str = Field("mcp-memory-deploy")
    enable_gitlab: bool = Field(False)
    gitlab_url: Optional[str] = Field(None)
    gitlab_token: Optional[str] = Field(None)
    gitlab_project_id: Optional[int] = Field(None)
    gitlab_pipeline_id: Optional[int] = Field(None)
    enable_github: bool = Field(False)
    github_token: Optional[str] = Field(None)
    github_repository: str = Field("example/mcp-memory")
    github_workflow_id: Optional[int] = Field(None)
    enable_bitbucket: bool = Field(False)
    bitbucket_username: Optional[str] = Field(None)
    bitbucket_password: Optional[str] = Field(None)
    bitbucket_repository: str = Field("example/mcp-memory")
    bitbucket_workspace: Optional[str] = Field(None)
    enable_docker: bool = Field(False)
    docker_registry: str = Field("docker.io")
    docker_image_name: str = Field("example/mcp-memory")
    docker_image_tag: str = Field("latest")
    dockerfile_path: str = Field("Dockerfile")
    build_context_path: str = Field(".")
    enable_kaniko: bool = Field(False)
    kaniko_image: str = Field("gcr.io/kaniko-project/executor")
    kaniko_dockerfile: str = Field("Dockerfile")
    kaniko_context: str = Field(".")
    kaniko_destination: str = Field(f"{docker_registry}/{docker_image_name}:{docker_image_tag}")
    enable_buildkit: bool = Field(False)
    buildkit_dockerfile: str = Field("Dockerfile")
    buildkit_context: str = Field(".")
    buildkit_target: Optional[str] = Field(None)
    buildkit_cache_from: Optional[str] = Field(None)
    enable_buildah: bool = Field(False)
    buildah_dockerfile: str = Field("Dockerfile")
    buildah_context: str = Field(".")
    buildah_destination: str = Field(f"{docker_registry}/{docker_image_name}:{docker_image_tag}")
    enable_podman: bool = Field(False)
    podman_dockerfile: str = Field("Dockerfile")
    podman_context: str = Field(".")
    podman_destination: str = Field(f"{docker_registry}/{docker_image_name}:{docker_image_tag}")
    enable_singularity: bool = Field(False)
    singularity_definition_file: str = Field("Singularity")
    singularity_image_path: str = Field("./mcp-memory.sif")
    enable_apptainer: bool = Field(False)
    apptainer_definition_file: str = Field("apptainer")
    apptainer_image_path: str = Field("./mcp-memory.sif")
    enable_lima: bool = Field(False)
    lima_instance: str = Field("default")
    lima_editor: str = Field("code")
    lima_shell: str = Field("sh")
    lima_disk_size: str = Field("100GB")
    lima_memory: str = Field("4GiB")
    lima_cpus: int = Field(4)
    enable_colima: bool = Field(False)
    colima_runtime: str = Field("docker")
    colima_arch: str = Field("x86_64")
    colima_cpu: int = Field(4)
    colima_memory: int = Field(4)
    colima_disk: int = Field(100)
    enable_docker_desktop: bool = Field(False)
    docker_desktop_version: str = Field("4.0.0")
    docker_desktop_kubernetes_enabled: bool = Field(True)
    docker_desktop_wsl_enabled: bool = Field(True)
    docker_desktop_wsl_integration_enabled: bool = Field(True)
    enable_rancher: bool = Field(False)
    rancher_url: Optional[str] = Field(None)
    rancher_access_key: Optional[str] = Field(None)
    rancher_secret_key: Optional[str] = Field(None)
    rancher_project_id: Optional[str] = Field(None)
    rancher_cluster_id: Optional[str] = Field(None)
    enable_open_shift: bool = Field(False)
    open_shift_url: Optional[str] = Field(None)
    open_shift_token: Optional[str] = Field(None)
    open_shift_project: str = Field("mcp-memory")
    enable_knative: bool = Field(False)
    knative_url: Optional[str] = Field(None)
    knative_token: Optional[str] = Field(None)
    knative_service: str = Field("mcp-memory-api")
    enable_keda: bool = Field(False)
    keda_scaler_name: str = Field("cpu")
    keda_scaler_type: str = Field("prometheus")
    keda_prometheus_server_url: Optional[str] = Field(None)
    keda_prometheus_metric_name: str = Field("cpu_usage_percent")
    keda_prometheus_metric_threshold: float = Field(70.0)
    keda_min_replicas: int = Field(1)
    keda_max_replicas: int = Field(10)
    enable_argo_rollouts: bool = Field(False)
    argo_rollouts_namespace: str = Field("default")
    argo_rollouts_deployment_name: str = Field("mcp-memory-api")
    argo_rollouts_strategy: str = Field("canary")
    argo_rollouts_steps: int = Field(3)
    argo_rollouts_analysis: bool = Field(True)
    argo_rollouts_analysis_run_service: str = Field("mcp-memory-analysis")
    argo_rollouts_analysis_run_template: str = Field("analysis-template")
    enable_flagger: bool = Field(False)
    flagger_namespace: str = Field("default")
    flagger_deployment_name: str = Field("mcp-memory-api")
    flagger_canary_analysis: bool = Field(True)
    flagger_canary_analysis_interval: str = Field("1m")
    flagger_canary_analysis_threshold: int = Field(10)
    flagger_canary_analysis_iterations: int = Field(10)
    enable_istio: bool = Field(False)
    istio_namespace: str = Field("istio-system")
    istio_gateway_name: str = Field("mcp-memory-gateway")
    istio_virtual_service_name: str = Field("mcp-memory-vs")
    istio_destination_rule_name: str = Field("mcp-memory-dr")
    istio_service_mesh_enabled: bool = Field(True)
    istio_mutual_tls_enabled: bool = Field(True)
    istio_sidecar_injection_enabled: bool = Field(True)
    enable_linkerd: bool = Field(False)
    linkerd_namespace: str = Field("linkerd")
    linkerd_app_name: str = Field("mcp-memory-api")
    linkerd_profile_name: str = Field("mcp-memory")
    linkerd_destination_name: str = Field("mcp-memory-api")
    linkerd_service_name: str = Field("mcp-memory-api")
    enable_consul: bool = Field(False)
    consul_namespace: str = Field("default")
    consul_service_name: str = Field("mcp-memory-api")
    consul_service_port: int = Field(8000)
    consul_datacenter: str = Field("dc1")
    consul_token: Optional[str] = Field(None)
    enable_nomad: bool = Field(False)
    nomad_namespace: str = Field("default")
    nomad_job_name: str = Field("mcp-memory-api")
    nomad_job_file: str = Field("mcp-memory.nomad")
    nomad_datacenter: str = Field("dc1")
    nomad_token: Optional[str] = Field(None)
    enable_vault: bool = Field(False)
    vault_namespace: str = Field("admin")
    vault_token: Optional[str] = Field(None)
    vault_kubernetes_auth_role: str = Field("mcp-memory")
    vault_kv_engine_path: str = Field("secret")
    vault_kv_engine_version: int = Field(2)
    enable_traefik: bool = Field(False)
    traefik_namespace: str = Field("traefik")
    traefik_entry_points: List[str] = Field(default_factory=lambda: ["http", "https"])
    traefik_routers: List[str] = Field(default_factory=lambda: ["mcp-memory-api"])
    traefik_middlewares: List[str] = Field(default_factory=lambda: ["strip-prefix", "rate-limit"])
    traefik_api_enabled: bool = Field(True)
    traefik_api_dashboard_enabled: bool = Field(True)
    traefik_api_dashboard_auth_enabled: bool = Field(True)
    traefik_api_dashboard_auth_basic_users: List[str] = Field(default_factory=list)
    enable_nginx: bool = Field(False)
    nginx_namespace: str = Field("default")
    nginx_deployment_name: str = Field("nginx-ingress")
    nginx_service_name: str = Field("nginx-ingress")
    nginx_config_map_name: str = Field("nginx-configuration")
    nginx_config_map_data: Dict[str, str] = Field(default_factory=dict)
    nginx_secret_name: str = Field("nginx-ingress-tls")
    nginx_secret_tls_crt: Optional[str] = Field(None)
    nginx_secret_tls_key: Optional[str] = Field(None)
    enable_haproxy: bool = Field(False)
    haproxy_namespace: str = Field("default")
    haproxy_deployment_name: str = Field("haproxy-ingress")
    haproxy_service_name: str = Field("haproxy-ingress")
    haproxy_config_map_name: str = Field("haproxy-configuration")
    haproxy_config_map_data: Dict[str, str] = Field(default_factory=dict)
    haproxy_secret_name: str = Field("haproxy-ingress-tls")
    haproxy_secret_tls_crt: Optional[str] = Field(None)
    haproxy_secret_tls_key: Optional[str] = Field(None)
    enable_envoy: bool = Field(False)
    envoy_namespace: str = Field("default")
    envoy_deployment_name: str = Field("envoy-ingress")
    envoy_service_name: str = Field("envoy-ingress")
    envoy_config_map_name: str = Field("envoy-configuration")
    envoy_config_map_data: Dict[str, str] = Field(default_factory=dict)
    envoy_secret_name: str = Field("envoy-ingress-tls")
    envoy_secret_tls_crt: Optional[str] = Field(None)
    envoy_secret_tls_key: Optional[str] = Field(None)
    enable_caddy: bool = Field(False)
    caddy_namespace: str = Field("default")
    caddy_deployment_name: str = Field("caddy-ingress")
    caddy_service_name: str = Field("caddy-ingress")
    caddy_config_map_name: str = Field("caddy-configuration")
    caddy_config_map_data: Dict[str, str] = Field(default_factory=dict)
    caddy_secret_name: str = Field("caddy-ingress-tls")
    caddy_secret_tls_crt: Optional[str] = Field(None)
    caddy_secret_tls_key: Optional[str] = Field(None)
    enable_keepalived: bool = Field(False)
    keepalived_namespace: str = Field("default")
    keepalived_deployment_name: str = Field("keepalived")
    keepalived_service_name: str = Field("keepalived")
    keepalived_config_map_name: str = Field("keepalived-configuration")
    keepalived_config_map_data: Dict[str, str] = Field(default_factory=dict)
    keepalived_vip: str = Field("192.168.1.100")
    keepalived_interface: str = Field("eth0")
    keepalived_virtual_router_id: int = Field(51)
    keepalived_priority: int = Field(100)
    enable_haproxy: bool = Field(False)
    haproxy_namespace: str = Field("default")
    haproxy_deployment_name: str = Field("haproxy")
    haproxy_service_name: str = Field("haproxy")
    haproxy_config_map_name: str = Field("haproxy-configuration")
    haproxy_config_map_data: Dict[str, str] = Field(default_factory=dict)
    haproxy_secret_name: str = Field("haproxy-tls")
    haproxy_secret_tls_crt: Optional[str] = Field(None)
    haproxy_secret_tls_key: Optional[str] = Field(None)
    enable_pgbouncer: bool = Field(False)
    pgbouncer_namespace: str = Field("default")
    pgbouncer_deployment_name: str = Field("pgbouncer")
    pgbouncer_service_name: str = Field("pgbouncer")
    pgbouncer_config_map_name: str = Field("pgbouncer-configuration")
    pgbouncer_config_map_data: Dict[str, str] = Field(default_factory=dict)
    pgbouncer_secret_name: str = Field("pgbouncer-auth")
    pgbouncer_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_proxy_sql: bool = Field(False)
    proxy_sql_namespace: str = Field("default")
    proxy_sql_deployment_name: str = Field("proxy-sql")
    proxy_sql_service_name: str = Field("proxy-sql")
    proxy_sql_config_map_name: str = Field("proxy-sql-configuration")
    proxy_sql_config_map_data: Dict[str, str] = Field(default_factory=dict)
    proxy_sql_secret_name: str = Field("proxy-sql-auth")
    proxy_sql_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_maxscale: bool = Field(False)
    maxscale_namespace: str = Field("default")
    maxscale_deployment_name: str = Field("maxscale")
    maxscale_service_name: str = Field("maxscale")
    maxscale_config_map_name: str = Field("maxscale-configuration")
    maxscale_config_map_data: Dict[str, str] = Field(default_factory=dict)
    maxscale_secret_name: str = Field("maxscale-auth")
    maxscale_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_oracle_sharding: bool = Field(False)
    oracle_sharding_namespace: str = Field("default")
    oracle_sharding_deployment_name: str = Field("oracle-sharding")
    oracle_sharding_service_name: str = Field("oracle-sharding")
    oracle_sharding_config_map_name: str = Field("oracle-sharding-configuration")
    oracle_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    oracle_sharding_secret_name: str = Field("oracle-sharding-auth")
    oracle_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_mongo_sharding: bool = Field(False)
    mongo_sharding_namespace: str = Field("default")
    mongo_sharding_deployment_name: str = Field("mongo-sharding")
    mongo_sharding_service_name: str = Field("mongo-sharding")
    mongo_sharding_config_map_name: str = Field("mongo-sharding-configuration")
    mongo_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    mongo_sharding_secret_name: str = Field("mongo-sharding-auth")
    mongo_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_cassandra_sharding: bool = Field(False)
    cassandra_sharding_namespace: str = Field("default")
    cassandra_sharding_deployment_name: str = Field("cassandra-sharding")
    cassandra_sharding_service_name: str = Field("cassandra-sharding")
    cassandra_sharding_config_map_name: str = Field("cassandra-sharding-configuration")
    cassandra_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    cassandra_sharding_secret_name: str = Field("cassandra-sharding-auth")
    cassandra_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_riak_sharding: bool = Field(False)
    riak_sharding_namespace: str = Field("default")
    riak_sharding_deployment_name: str = Field("riak-sharding")
    riak_sharding_service_name: str = Field("riak-sharding")
    riak_sharding_config_map_name: str = Field("riak-sharding-configuration")
    riak_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    riak_sharding_secret_name: str = Field("riak-sharding-auth")
    riak_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_arangodb_sharding: bool = Field(False)
    arangodb_sharding_namespace: str = Field("default")
    arangodb_sharding_deployment_name: str = Field("arangodb-sharding")
    arangodb_sharding_service_name: str = Field("arangodb-sharding")
    arangodb_sharding_config_map_name: str = Field("arangodb-sharding-configuration")
    arangodb_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    arangodb_sharding_secret_name: str = Field("arangodb-sharding-auth")
    arangodb_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_neo4j_sharding: bool = Field(False)
    neo4j_sharding_namespace: str = Field("default")
    neo4j_sharding_deployment_name: str = Field("neo4j-sharding")
    neo4j_sharding_service_name: str = Field("neo4j-sharding")
    neo4j_sharding_config_map_name: str = Field("neo4j-sharding-configuration")
    neo4j_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    neo4j_sharding_secret_name: str = Field("neo4j-sharding-auth")
    neo4j_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_orientdb_sharding: bool = Field(False)
    orientdb_sharding_namespace: str = Field("default")
    orientdb_sharding_deployment_name: str = Field("orientdb-sharding")
    orientdb_sharding_service_name: str = Field("orientdb-sharding")
    orientdb_sharding_config_map_name: str = Field("orientdb-sharding-configuration")
    orientdb_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    orientdb_sharding_secret_name: str = Field("orientdb-sharding-auth")
    orientdb_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_db2_sharding: bool = Field(False)
    db2_sharding_namespace: str = Field("default")
    db2_sharding_deployment_name: str = Field("db2-sharding")
    db2_sharding_service_name: str = Field("db2-sharding")
    db2_sharding_config_map_name: str = Field("db2-sharding-configuration")
    db2_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    db2_sharding_secret_name: str = Field("db2-sharding-auth")
    db2_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_snowflake_sharding: bool = Field(False)
    snowflake_sharding_namespace: str = Field("default")
    snowflake_sharding_deployment_name: str = Field("snowflake-sharding")
    snowflake_sharding_service_name: str = Field("snowflake-sharding")
    snowflake_sharding_config_map_name: str = Field("snowflake-sharding-configuration")
    snowflake_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    snowflake_sharding_secret_name: str = Field("snowflake-sharding-auth")
    snowflake_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_redshift_sharding: bool = Field(False)
    redshift_sharding_namespace: str = Field("default")
    redshift_sharding_deployment_name: str = Field("redshift-sharding")
    redshift_sharding_service_name: str = Field("redshift-sharding")
    redshift_sharding_config_map_name: str = Field("redshift-sharding-configuration")
    redshift_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    redshift_sharding_secret_name: str = Field("redshift-sharding-auth")
    redshift_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_bigquery_sharding: bool = Field(False)
    bigquery_sharding_namespace: str = Field("default")
    bigquery_sharding_deployment_name: str = Field("bigquery-sharding")
    bigquery_sharding_service_name: str = Field("bigquery-sharding")
    bigquery_sharding_config_map_name: str = Field("bigquery-sharding-configuration")
    bigquery_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    bigquery_sharding_secret_name: str = Field("bigquery-sharding-auth")
    bigquery_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_databricks_sharding: bool = Field(False)
    databricks_sharding_namespace: str = Field("default")
    databricks_sharding_deployment_name: str = Field("databricks-sharding")
    databricks_sharding_service_name: str = Field("databricks-sharding")
    databricks_sharding_config_map_name: str = Field("databricks-sharding-configuration")
    databricks_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    databricks_sharding_secret_name: str = Field("databricks-sharding-auth")
    databricks_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_synapse_sharding: bool = Field(False)
    synapse_sharding_namespace: str = Field("default")
    synapse_sharding_deployment_name: str = Field("synapse-sharding")
    synapse_sharding_service_name: str = Field("synapse-sharding")
    synapse_sharding_config_map_name: str = Field("synapse-sharding-configuration")
    synapse_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    synapse_sharding_secret_name: str = Field("synapse-sharding-auth")
    synapse_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_athena_sharding: bool = Field(False)
    athena_sharding_namespace: str = Field("default")
    athena_sharding_deployment_name: str = Field("athena-sharding")
    athena_sharding_service_name: str = Field("athena-sharding")
    athena_sharding_config_map_name: str = Field("athena-sharding-configuration")
    athena_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    athena_sharding_secret_name: str = Field("athena-sharding-auth")
    athena_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_glue_sharding: bool = Field(False)
    glue_sharding_namespace: str = Field("default")
    glue_sharding_deployment_name: str = Field("glue-sharding")
    glue_sharding_service_name: str = Field("glue-sharding")
    glue_sharding_config_map_name: str = Field("glue-sharding-configuration")
    glue_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    glue_sharding_secret_name: str = Field("glue-sharding-auth")
    glue_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_emr_sharding: bool = Field(False)
    emr_sharding_namespace: str = Field("default")
    emr_sharding_deployment_name: str = Field("emr-sharding")
    emr_sharding_service_name: str = Field("emr-sharding")
    emr_sharding_config_map_name: str = Field("emr-sharding-configuration")
    emr_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    emr_sharding_secret_name: str = Field("emr-sharding-auth")
    emr_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_dataproc_sharding: bool = Field(False)
    dataproc_sharding_namespace: str = Field("default")
    dataproc_sharding_deployment_name: str = Field("dataproc-sharding")
    dataproc_sharding_service_name: str = Field("dataproc-sharding")
    dataproc_sharding_config_map_name: str = Field("dataproc-sharding-configuration")
    dataproc_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    dataproc_sharding_secret_name: str = Field("dataproc-sharding-auth")
    dataproc_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_datalake_sharding: bool = Field(False)
    datalake_sharding_namespace: str = Field("default")
    datalake_sharding_deployment_name: str = Field("datalake-sharding")
    datalake_sharding_service_name: str = Field("datalake-sharding")
    datalake_sharding_config_map_name: str = Field("datalake-sharding-configuration")
    datalake_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    datalake_sharding_secret_name: str = Field("datalake-sharding-auth")
    datalake_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_datawarehouse_sharding: bool = Field(False)
    datawarehouse_sharding_namespace: str = Field("default")
    datawarehouse_sharding_deployment_name: str = Field("datawarehouse-sharding")
    datawarehouse_sharding_service_name: str = Field("datawarehouse-sharding")
    datawarehouse_sharding_config_map_name: str = Field("datawarehouse-sharding-configuration")
    datawarehouse_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    datawarehouse_sharding_secret_name: str = Field("datawarehouse-sharding-auth")
    datawarehouse_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_datahub_sharding: bool = Field(False)
    datahub_sharding_namespace: str = Field("default")
    datahub_sharding_deployment_name: str = Field("datahub-sharding")
    datahub_sharding_service_name: str = Field("datahub-sharding")
    datahub_sharding_config_map_name: str = Field("datahub-sharding-configuration")
    datahub_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    datahub_sharding_secret_name: str = Field("datahub-sharding-auth")
    datahub_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_datacatalog_sharding: bool = Field(False)
    datacatalog_sharding_namespace: str = Field("default")
    datacatalog_sharding_deployment_name: str = Field("datacatalog-sharding")
    datacatalog_sharding_service_name: str = Field("datacatalog-sharding")
    datacatalog_sharding_config_map_name: str = Field("datacatalog-sharding-configuration")
    datacatalog_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    datacatalog_sharding_secret_name: str = Field("datacatalog-sharding-auth")
    datacatalog_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_dataplex_sharding: bool = Field(False)
    dataplex_sharding_namespace: str = Field("default")
    dataplex_sharding_deployment_name: str = Field("dataplex-sharding")
    dataplex_sharding_service_name: str = Field("dataplex-sharding")
    dataplex_sharding_config_map_name: str = Field("dataplex-sharding-configuration")
    dataplex_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    dataplex_sharding_secret_name: str = Field("dataplex-sharding-auth")
    dataplex_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_bigtable_sharding: bool = Field(False)
    bigtable_sharding_namespace: str = Field("default")
    bigtable_sharding_deployment_name: str = Field("bigtable-sharding")
    bigtable_sharding_service_name: str = Field("bigtable-sharding")
    bigtable_sharding_config_map_name: str = Field("bigtable-sharding-configuration")
    bigtable_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    bigtable_sharding_secret_name: str = Field("bigtable-sharding-auth")
    bigtable_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_spanner_sharding: bool = Field(False)
    spanner_sharding_namespace: str = Field("default")
    spanner_sharding_deployment_name: str = Field("spanner-sharding")
    spanner_sharding_service_name: str = Field("spanner-sharding")
    spanner_sharding_config_map_name: str = Field("spanner-sharding-configuration")
    spanner_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    spanner_sharding_secret_name: str = Field("spanner-sharding-auth")
    spanner_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_firestore_sharding: bool = Field(False)
    firestore_sharding_namespace: str = Field("default")
    firestore_sharding_deployment_name: str = Field("firestore-sharding")
    firestore_sharding_service_name: str = Field("firestore-sharding")
    firestore_sharding_config_map_name: str = Field("firestore-sharding-configuration")
    firestore_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    firestore_sharding_secret_name: str = Field("firestore-sharding-auth")
    firestore_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_realtime_db_sharding: bool = Field(False)
    realtime_db_sharding_namespace: str = Field("default")
    realtime_db_sharding_deployment_name: str = Field("realtime-db-sharding")
    realtime_db_sharding_service_name: str = Field("realtime-db-sharding")
    realtime_db_sharding_config_map_name: str = Field("realtime-db-sharding-configuration")
    realtime_db_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    realtime_db_sharding_secret_name: str = Field("realtime-db-sharding-auth")
    realtime_db_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_cloud_sql_sharding: bool = Field(False)
    cloud_sql_sharding_namespace: str = Field("default")
    cloud_sql_sharding_deployment_name: str = Field("cloud-sql-sharding")
    cloud_sql_sharding_service_name: str = Field("cloud-sql-sharding")
    cloud_sql_sharding_config_map_name: str = Field("cloud-sql-sharding-configuration")
    cloud_sql_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    cloud_sql_sharding_secret_name: str = Field("cloud-sql-sharding-auth")
    cloud_sql_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_cloud_storage_sharding: bool = Field(False)
    cloud_storage_sharding_namespace: str = Field("default")
    cloud_storage_sharding_deployment_name: str = Field("cloud-storage-sharding")
    cloud_storage_sharding_service_name: str = Field("cloud-storage-sharding")
    cloud_storage_sharding_config_map_name: str = Field("cloud-storage-sharding-configuration")
    cloud_storage_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    cloud_storage_sharding_secret_name: str = Field("cloud-storage-sharding-auth")
    cloud_storage_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_cloud_functions_sharding: bool = Field(False)
    cloud_functions_sharding_namespace: str = Field("default")
    cloud_functions_sharding_deployment_name: str = Field("cloud-functions-sharding")
    cloud_functions_sharding_service_name: str = Field("cloud-functions-sharding")
    cloud_functions_sharding_config_map_name: str = Field("cloud-functions-sharding-configuration")
    cloud_functions_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    cloud_functions_sharding_secret_name: str = Field("cloud-functions-sharding-auth")
    cloud_functions_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_cloud_run_sharding: bool = Field(False)
    cloud_run_sharding_namespace: str = Field("default")
    cloud_run_sharding_deployment_name: str = Field("cloud-run-sharding")
    cloud_run_sharding_service_name: str = Field("cloud-run-sharding")
    cloud_run_sharding_config_map_name: str = Field("cloud-run-sharding-configuration")
    cloud_run_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    cloud_run_sharding_secret_name: str = Field("cloud-run-sharding-auth")
    cloud_run_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_kubernetes_sharding: bool = Field(False)
    kubernetes_sharding_namespace: str = Field("default")
    kubernetes_sharding_deployment_name: str = Field("kubernetes-sharding")
    kubernetes_sharding_service_name: str = Field("kubernetes-sharding")
    kubernetes_sharding_config_map_name: str = Field("kubernetes-sharding-configuration")
    kubernetes_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    kubernetes_sharding_secret_name: str = Field("kubernetes-sharding-auth")
    kubernetes_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_helm_sharding: bool = Field(False)
    helm_sharding_namespace: str = Field("default")
    helm_sharding_deployment_name: str = Field("helm-sharding")
    helm_sharding_service_name: str = Field("helm-sharding")
    helm_sharding_config_map_name: str = Field("helm-sharding-configuration")
    helm_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    helm_sharding_secret_name: str = Field("helm-sharding-auth")
    helm_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_tiller_sharding: bool = Field(False)
    tiller_sharding_namespace: str = Field("kube-system")
    tiller_sharding_deployment_name: str = Field("tiller-sharding")
    tiller_sharding_service_name: str = Field("tiller-sharding")
    tiller_sharding_config_map_name: str = Field("tiller-sharding-configuration")
    tiller_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    tiller_sharding_secret_name: str = Field("tiller-sharding-auth")
    tiller_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_argo_sharding: bool = Field(False)
    argo_sharding_namespace: str = Field("argo")
    argo_sharding_deployment_name: str = Field("argo-sharding")
    argo_sharding_service_name: str = Field("argo-sharding")
    argo_sharding_config_map_name: str = Field("argo-sharding-configuration")
    argo_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    argo_sharding_secret_name: str = Field("argo-sharding-auth")
    argo_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_argo_cd_sharding: bool = Field(False)
    argo_cd_sharding_namespace: str = Field("argocd")
    argo_cd_sharding_deployment_name: str = Field("argo-cd-sharding")
    argo_cd_sharding_service_name: str = Field("argo-cd-sharding")
    argo_cd_sharding_config_map_name: str = Field("argo-cd-sharding-configuration")
    argo_cd_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    argo_cd_sharding_secret_name: str = Field("argo-cd-sharding-auth")
    argo_cd_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_flux_sharding: bool = Field(False)
    flux_sharding_namespace: str = Field("flux-system")
    flux_sharding_deployment_name: str = Field("flux-sharding")
    flux_sharding_service_name: str = Field("flux-sharding")
    flux_sharding_config_map_name: str = Field("flux-sharding-configuration")
    flux_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    flux_sharding_secret_name: str = Field("flux-sharding-auth")
    flux_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_jenkins_sharding: bool = Field(False)
    jenkins_sharding_namespace: str = Field("default")
    jenkins_sharding_deployment_name: str = Field("jenkins-sharding")
    jenkins_sharding_service_name: str = Field("jenkins-sharding")
    jenkins_sharding_config_map_name: str = Field("jenkins-sharding-configuration")
    jenkins_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    jenkins_sharding_secret_name: str = Field("jenkins-sharding-auth")
    jenkins_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_gitlab_sharding: bool = Field(False)
    gitlab_sharding_namespace: str = Field("default")
    gitlab_sharding_deployment_name: str = Field("gitlab-sharding")
    gitlab_sharding_service_name: str = Field("gitlab-sharding")
    gitlab_sharding_config_map_name: str = Field("gitlab-sharding-configuration")
    gitlab_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    gitlab_sharding_secret_name: str = Field("gitlab-sharding-auth")
    gitlab_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_github_sharding: bool = Field(False)
    github_sharding_namespace: str = Field("default")
    github_sharding_deployment_name: str = Field("github-sharding")
    github_sharding_service_name: str = Field("github-sharding")
    github_sharding_config_map_name: str = Field("github-sharding-configuration")
    github_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    github_sharding_secret_name: str = Field("github-sharding-auth")
    github_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_bitbucket_sharding: bool = Field(False)
    bitbucket_sharding_namespace: str = Field("default")
    bitbucket_sharding_deployment_name: str = Field("bitbucket-sharding")
    bitbucket_sharding_service_name: str = Field("bitbucket-sharding")
    bitbucket_sharding_config_map_name: str = Field("bitbucket-sharding-configuration")
    bitbucket_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    bitbucket_sharding_secret_name: str = Field("bitbucket-sharding-auth")
    bitbucket_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_docker_sharding: bool = Field(False)
    docker_sharding_namespace: str = Field("default")
    docker_sharding_deployment_name: str = Field("docker-sharding")
    docker_sharding_service_name: str = Field("docker-sharding")
    docker_sharding_config_map_name: str = Field("docker-sharding-configuration")
    docker_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    docker_sharding_secret_name: str = Field("docker-sharding-auth")
    docker_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_kaniko_sharding: bool = Field(False)
    kaniko_sharding_namespace: str = Field("default")
    kaniko_sharding_deployment_name: str = Field("kaniko-sharding")
    kaniko_sharding_service_name: str = Field("kaniko-sharding")
    kaniko_sharding_config_map_name: str = Field("kaniko-sharding-configuration")
    kaniko_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    kaniko_sharding_secret_name: str = Field("kaniko-sharding-auth")
    kaniko_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_buildkit_sharding: bool = Field(False)
    buildkit_sharding_namespace: str = Field("default")
    buildkit_sharding_deployment_name: str = Field("buildkit-sharding")
    buildkit_sharding_service_name: str = Field("buildkit-sharding")
    buildkit_sharding_config_map_name: str = Field("buildkit-sharding-configuration")
    buildkit_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    buildkit_sharding_secret_name: str = Field("buildkit-sharding-auth")
    buildkit_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_buildah_sharding: bool = Field(False)
    buildah_sharding_namespace: str = Field("default")
    buildah_sharding_deployment_name: str = Field("buildah-sharding")
    buildah_sharding_service_name: str = Field("buildah-sharding")
    buildah_sharding_config_map_name: str = Field("buildah-sharding-configuration")
    buildah_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    buildah_sharding_secret_name: str = Field("buildah-sharding-auth")
    buildah_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_podman_sharding: bool = Field(False)
    podman_sharding_namespace: str = Field("default")
    podman_sharding_deployment_name: str = Field("podman-sharding")
    podman_sharding_service_name: str = Field("podman-sharding")
    podman_sharding_config_map_name: str = Field("podman-sharding-configuration")
    podman_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    podman_sharding_secret_name: str = Field("podman-sharding-auth")
    podman_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_singularity_sharding: bool = Field(False)
    singularity_sharding_namespace: str = Field("default")
    singularity_sharding_deployment_name: str = Field("singularity-sharding")
    singularity_sharding_service_name: str = Field("singularity-sharding")
    singularity_sharding_config_map_name: str = Field("singularity-sharding-configuration")
    singularity_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    singularity_sharding_secret_name: str = Field("singularity-sharding-auth")
    singularity_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_apptainer_sharding: bool = Field(False)
    apptainer_sharding_namespace: str = Field("default")
    apptainer_sharding_deployment_name: str = Field("apptainer-sharding")
    apptainer_sharding_service_name: str = Field("apptainer-sharding")
    apptainer_sharding_config_map_name: str = Field("apptainer-sharding-configuration")
    apptainer_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    apptainer_sharding_secret_name: str = Field("apptainer-sharding-auth")
    apptainer_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_lima_sharding: bool = Field(False)
    lima_sharding_namespace: str = Field("default")
    lima_sharding_deployment_name: str = Field("lima-sharding")
    lima_sharding_service_name: str = Field("lima-sharding")
    lima_sharding_config_map_name: str = Field("lima-sharding-configuration")
    lima_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    lima_sharding_secret_name: str = Field("lima-sharding-auth")
    lima_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_colima_sharding: bool = Field(False)
    colima_sharding_namespace: str = Field("default")
    colima_sharding_deployment_name: str = Field("colima-sharding")
    colima_sharding_service_name: str = Field("colima-sharding")
    colima_sharding_config_map_name: str = Field("colima-sharding-configuration")
    colima_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    colima_sharding_secret_name: str = Field("colima-sharding-auth")
    colima_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_docker_desktop_sharding: bool = Field(False)
    docker_desktop_sharding_namespace: str = Field("default")
    docker_desktop_sharding_deployment_name: str = Field("docker-desktop-sharding")
    docker_desktop_sharding_service_name: str = Field("docker-desktop-sharding")
    docker_desktop_sharding_config_map_name: str = Field("docker-desktop-sharding-configuration")
    docker_desktop_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    docker_desktop_sharding_secret_name: str = Field("docker-desktop-sharding-auth")
    docker_desktop_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_rancher_sharding: bool = Field(False)
    rancher_sharding_namespace: str = Field("default")
    rancher_sharding_deployment_name: str = Field("rancher-sharding")
    rancher_sharding_service_name: str = Field("rancher-sharding")
    rancher_sharding_config_map_name: str = Field("rancher-sharding-configuration")
    rancher_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    rancher_sharding_secret_name: str = Field("rancher-sharding-auth")
    rancher_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_open_shift_sharding: bool = Field(False)
    open_shift_sharding_namespace: str = Field("default")
    open_shift_sharding_deployment_name: str = Field("open-shift-sharding")
    open_shift_sharding_service_name: str = Field("open-shift-sharding")
    open_shift_sharding_config_map_name: str = Field("open-shift-sharding-configuration")
    open_shift_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    open_shift_sharding_secret_name: str = Field("open-shift-sharding-auth")
    open_shift_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_knative_sharding: bool = Field(False)
    knative_sharding_namespace: str = Field("default")
    knative_sharding_deployment_name: str = Field("knative-sharding")
    knative_sharding_service_name: str = Field("knative-sharding")
    knative_sharding_config_map_name: str = Field("knative-sharding-configuration")
    knative_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    knative_sharding_secret_name: str = Field("knative-sharding-auth")
    knative_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_keda_sharding: bool = Field(False)
    keda_sharding_namespace: str = Field("default")
    keda_sharding_deployment_name: str = Field("keda-sharding")
    keda_sharding_service_name: str = Field("keda-sharding")
    keda_sharding_config_map_name: str = Field("keda-sharding-configuration")
    keda_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    keda_sharding_secret_name: str = Field("keda-sharding-auth")
    keda_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_argo_rollouts_sharding: bool = Field(False)
    argo_rollouts_sharding_namespace: str = Field("default")
    argo_rollouts_sharding_deployment_name: str = Field("argo-rollouts-sharding")
    argo_rollouts_sharding_service_name: str = Field("argo-rollouts-sharding")
    argo_rollouts_sharding_config_map_name: str = Field("argo-rollouts-sharding-configuration")
    argo_rollouts_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    argo_rollouts_sharding_secret_name: str = Field("argo-rollouts-sharding-auth")
    argo_rollouts_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_flagger_sharding: bool = Field(False)
    flagger_sharding_namespace: str = Field("default")
    flagger_sharding_deployment_name: str = Field("flagger-sharding")
    flagger_sharding_service_name: str = Field("flagger-sharding")
    flagger_sharding_config_map_name: str = Field("flagger-sharding-configuration")
    flagger_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    flagger_sharding_secret_name: str = Field("flagger-sharding-auth")
    flagger_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_istio_sharding: bool = Field(False)
    istio_sharding_namespace: str = Field("istio-system")
    istio_sharding_deployment_name: str = Field("istio-sharding")
    istio_sharding_service_name: str = Field("istio-sharding")
    istio_sharding_config_map_name: str = Field("istio-sharding-configuration")
    istio_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    istio_sharding_secret_name: str = Field("istio-sharding-auth")
    istio_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_linkerd_sharding: bool = Field(False)
    linkerd_sharding_namespace: str = Field("linkerd")
    linkerd_sharding_deployment_name: str = Field("linkerd-sharding")
    linkerd_sharding_service_name: str = Field("linkerd-sharding")
    linkerd_sharding_config_map_name: str = Field("linkerd-sharding-configuration")
    linkerd_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    linkerd_sharding_secret_name: str = Field("linkerd-sharding-auth")
    linkerd_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_consul_sharding: bool = Field(False)
    consul_sharding_namespace: str = Field("default")
    consul_sharding_deployment_name: str = Field("consul-sharding")
    consul_sharding_service_name: str = Field("consul-sharding")
    consul_sharding_config_map_name: str = Field("consul-sharding-configuration")
    consul_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    consul_sharding_secret_name: str = Field("consul-sharding-auth")
    consul_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_nomad_sharding: bool = Field(False)
    nomad_sharding_namespace: str = Field("default")
    nomad_sharding_deployment_name: str = Field("nomad-sharding")
    nomad_sharding_service_name: str = Field("nomad-sharding")
    nomad_sharding_config_map_name: str = Field("nomad-sharding-configuration")
    nomad_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    nomad_sharding_secret_name: str = Field("nomad-sharding-auth")
    nomad_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_vault_sharding: bool = Field(False)
    vault_sharding_namespace: str = Field("admin")
    vault_sharding_deployment_name: str = Field("vault-sharding")
    vault_sharding_service_name: str = Field("vault-sharding")
    vault_sharding_config_map_name: str = Field("vault-sharding-configuration")
    vault_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    vault_sharding_secret_name: str = Field("vault-sharding-auth")
    vault_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_traefik_sharding: bool = Field(False)
    traefik_sharding_namespace: str = Field("traefik")
    traefik_sharding_deployment_name: str = Field("traefik-sharding")
    traefik_sharding_service_name: str = Field("traefik-sharding")
    traefik_sharding_config_map_name: str = Field("traefik-sharding-configuration")
    traefik_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    traefik_sharding_secret_name: str = Field("traefik-sharding-auth")
    traefik_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_nginx_sharding: bool = Field(False)
    nginx_sharding_namespace: str = Field("default")
    nginx_sharding_deployment_name: str = Field("nginx-sharding")
    nginx_sharding_service_name: str = Field("nginx-sharding")
    nginx_sharding_config_map_name: str = Field("nginx-sharding-configuration")
    nginx_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    nginx_sharding_secret_name: str = Field("nginx-sharding-auth")
    nginx_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_haproxy_sharding: bool = Field(False)
    haproxy_sharding_namespace: str = Field("default")
    haproxy_sharding_deployment_name: str = Field("haproxy-sharding")
    haproxy_sharding_service_name: str = Field("haproxy-sharding")
    haproxy_sharding_config_map_name: str = Field("haproxy-sharding-configuration")
    haproxy_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    haproxy_sharding_secret_name: str = Field("haproxy-sharding-auth")
    haproxy_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_envoy_sharding: bool = Field(False)
    envoy_sharding_namespace: str = Field("default")
    envoy_sharding_deployment_name: str = Field("envoy-sharding")
    envoy_sharding_service_name: str = Field("envoy-sharding")
    envoy_sharding_config_map_name: str = Field("envoy-sharding-configuration")
    envoy_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    envoy_sharding_secret_name: str = Field("envoy-sharding-auth")
    envoy_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_caddy_sharding: bool = Field(False)
    caddy_sharding_namespace: str = Field("default")
    caddy_sharding_deployment_name: str = Field("caddy-sharding")
    caddy_sharding_service_name: str = Field("caddy-sharding")
    caddy_sharding_config_map_name: str = Field("caddy-sharding-configuration")
    caddy_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    caddy_sharding_secret_name: str = Field("caddy-sharding-auth")
    caddy_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_keepalived_sharding: bool = Field(False)
    keepalived_sharding_namespace: str = Field("default")
    keepalived_sharding_deployment_name: str = Field("keepalived-sharding")
    keepalived_sharding_service_name: str = Field("keepalived-sharding")
    keepalived_sharding_config_map_name: str = Field("keepalived-sharding-configuration")
    keepalived_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    keepalived_sharding_secret_name: str = Field("keepalived-sharding-auth")
    keepalived_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_pgbouncer_sharding: bool = Field(False)
    pgbouncer_sharding_namespace: str = Field("default")
    pgbouncer_sharding_deployment_name: str = Field("pgbouncer-sharding")
    pgbouncer_sharding_service_name: str = Field("pgbouncer-sharding")
    pgbouncer_sharding_config_map_name: str = Field("pgbouncer-sharding-configuration")
    pgbouncer_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    pgbouncer_sharding_secret_name: str = Field("pgbouncer-sharding-auth")
    pgbouncer_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_proxy_sql_sharding: bool = Field(False)
    proxy_sql_sharding_namespace: str = Field("default")
    proxy_sql_sharding_deployment_name: str = Field("proxy-sql-sharding")
    proxy_sql_sharding_service_name: str = Field("proxy-sql-sharding")
    proxy_sql_sharding_config_map_name: str = Field("proxy-sql-sharding-configuration")
    proxy_sql_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    proxy_sql_sharding_secret_name: str = Field("proxy-sql-sharding-auth")
    proxy_sql_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_maxscale_sharding: bool = Field(False)
    maxscale_sharding_namespace: str = Field("default")
    maxscale_sharding_deployment_name: str = Field("maxscale-sharding")
    maxscale_sharding_service_name: str = Field("maxscale-sharding")
    maxscale_sharding_config_map_name: str = Field("maxscale-sharding-configuration")
    maxscale_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    maxscale_sharding_secret_name: str = Field("maxscale-sharding-auth")
    maxscale_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_oracle_sharding_sharding: bool = Field(False)
    oracle_sharding_sharding_namespace: str = Field("default")
    oracle_sharding_sharding_deployment_name: str = Field("oracle-sharding-sharding")
    oracle_sharding_sharding_service_name: str = Field("oracle-sharding-sharding")
    oracle_sharding_sharding_config_map_name: str = Field("oracle-sharding-sharding-configuration")
    oracle_sharding_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    oracle_sharding_sharding_secret_name: str = Field("oracle-sharding-sharding-auth")
    oracle_sharding_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_mongo_sharding_sharding: bool = Field(False)
    mongo_sharding_sharding_namespace: str = Field("default")
    mongo_sharding_sharding_deployment_name: str = Field("mongo-sharding-sharding")
    mongo_sharding_sharding_service_name: str = Field("mongo-sharding-sharding")
    mongo_sharding_sharding_config_map_name: str = Field("mongo-sharding-sharding-configuration")
    mongo_sharding_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    mongo_sharding_sharding_secret_name: str = Field("mongo-sharding-sharding-auth")
    mongo_sharding_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_cassandra_sharding_sharding: bool = Field(False)
    cassandra_sharding_sharding_namespace: str = Field("default")
    cassandra_sharding_sharding_deployment_name: str = Field("cassandra-sharding-sharding")
    cassandra_sharding_sharding_service_name: str = Field("cassandra-sharding-sharding")
    cassandra_sharding_sharding_config_map_name: str = Field("cassandra-sharding-sharding-configuration")
    cassandra_sharding_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    cassandra_sharding_sharding_secret_name: str = Field("cassandra-sharding-sharding-auth")
    cassandra_sharding_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_riak_sharding_sharding: bool = Field(False)
    riak_sharding_sharding_namespace: str = Field("default")
    riak_sharding_sharding_deployment_name: str = Field("riak-sharding-sharding")
    riak_sharding_sharding_service_name: str = Field("riak-sharding-sharding")
    riak_sharding_sharding_config_map_name: str = Field("riak-sharding-sharding-configuration")
    riak_sharding_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    riak_sharding_sharding_secret_name: str = Field("riak-sharding-sharding-auth")
    riak_sharding_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_arangodb_sharding_sharding: bool = Field(False)
    arangodb_sharding_sharding_namespace: str = Field("default")
    arangodb_sharding_sharding_deployment_name: str = Field("arangodb-sharding-sharding")
    arangodb_sharding_sharding_service_name: str = Field("arangodb-sharding-sharding")
    arangodb_sharding_sharding_config_map_name: str = Field("arangodb-sharding-sharding-configuration")
    arangodb_sharding_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    arangodb_sharding_sharding_secret_name: str = Field("arangodb-sharding-sharding-auth")
    arangodb_sharding_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_neo4j_sharding_sharding: bool = Field(False)
    neo4j_sharding_sharding_namespace: str = Field("default")
    neo4j_sharding_sharding_deployment_name: str = Field("neo4j-sharding-sharding")
    neo4j_sharding_sharding_service_name: str = Field("neo4j-sharding-sharding")
    neo4j_sharding_sharding_config_map_name: str = Field("neo4j-sharding-sharding-configuration")
    neo4j_sharding_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    neo4j_sharding_sharding_secret_name: str = Field("neo4j-sharding-sharding-auth")
    neo4j_sharding_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_orientdb_sharding_sharding: bool = Field(False)
    orientdb_sharding_sharding_namespace: str = Field("default")
    orientdb_sharding_sharding_deployment_name: str = Field("orientdb-sharding-sharding")
    orientdb_sharding_sharding_service_name: str = Field("orientdb-sharding-sharding")
    orientdb_sharding_sharding_config_map_name: str = Field("orientdb-sharding-sharding-configuration")
    orientdb_sharding_sharding_config_map_data: Dict[str, str] = Field(default_factory=dict)
    orientdb_sharding_sharding_secret_name: str = Field("orientdb-sharding-sharding-auth")
    orientdb_sharding_sharding_secret_users: Dict[str, str] = Field(default_factory=dict)
    enable_db2_sharding_sharding: bool = Field(False)
    db2_sharding_sharding_namespace: str = Field("default")
    db2_sharding_sharding_deployment_name: str = Field("db2-sharding-sharding")
    db2_sharding_sharding_service