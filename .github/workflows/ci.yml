name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Set up pip cache key
        id: pip-cache-keys
        run: |
          echo "CACHE_KEY=$(python -V | tr ' ' '_' )-$(sha256sum requirements.txt | cut -d ' ' -f1)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Restore pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ steps.pip-cache-keys.outputs.CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install test/linters
          pip install pytest pytest-asyncio pytest-cov flake8 mypy

      - name: Lint (flake8)
        run: |
          flake8

      - name: Type check (mypy)
        run: |
          mypy

      - name: Run tests
        env:
          # Ensure tests do not try to reach external services by default
          ENVIRONMENT: ci
        run: |
          pytest -q --cov=src --cov-report=xml --cov-report=term-missing
          # If tests fail due to network, mark them with @pytest.mark.network and run:
          # pytest -q --cov=src --cov-report=xml --cov-report=term-missing -k "not network"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Print Docker image tags
        run: |
          echo "Built image tags: ${{ steps.meta.outputs.tags }}"

  # Optional: quick verification that the container starts
  smoke:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for smoke test
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: mcm:ci-smoke

      - name: Run container and check health
        run: |
          docker run -d --rm -p 8000:8000 --name mcm mcm:ci-smoke
          # Wait up to ~30s for health endpoint
          for i in {1..10}; do
            if curl -fsS http://127.0.0.1:8000/health >/dev/null 2>&1; then
              echo "Healthcheck OK"
              exit 0
            fi
            sleep 3
          done
          echo "Healthcheck failed"
          docker logs mcm || true
          exit 1